generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  password      String
  email         String   @unique
  phone         String   @unique
  role_id       String   @db.ObjectId
  refresh_token String?  @unique
  createdAt     DateTime @default(now())

  role   Role    @relation(fields: [role_id], references: [id])
  orders Order[]
}

model Role {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  role_name String
  users     User[]
}

model Order {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  customer_id      String        @db.ObjectId
  order_date       DateTime      @default(now())
  order_type       String        // dine-in, takeaway, delivery
  order_source     String        // offline, online
  delivery_address String?       // null jika offline
  total            Int
  status           String        @default("pending") // pending, completed, canceled
  createdAt        DateTime      @default(now())

  customer      User         @relation(fields: [customer_id], references: [id])
  order_details OrderDetail[]
  payment       Payment?
  discounts     OrderDiscount[]
}

model OrderDetail {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  order_id      String              @db.ObjectId
  product_id    String              @db.ObjectId
  qty           Int
  unit_price    Int
  total_price   Int
  createdAt     DateTime            @default(now())

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id])
  options OrderDetailOption[]
}

model OrderDetailOption {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  order_detail_id  String             @db.ObjectId
  option_value_id  String             @db.ObjectId

  orderDetail OrderDetail       @relation(fields: [order_detail_id], references: [id], onDelete: Cascade)
  optionValue ProductOptionValue @relation(fields: [option_value_id], references: [id])
}

model Product {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  product_name  String
  image         String
  category      String
  description   String
  price         Int
  stock         Int

  order_details          OrderDetail[]
  options                ProductOption[]
  inventory_transactions InventoryTransaction[]
}

model ProductOption {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  product_id String             @db.ObjectId
  name       String             // contoh: Size, Ice, Sweetness
  createdAt  DateTime           @default(now())

  product Product             @relation(fields: [product_id], references: [id])
  values  ProductOptionValue[]
}

model ProductOptionValue {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  option_id   String         @db.ObjectId
  label       String         // contoh: Regular, Large, Less Ice, Extra Sweet
  extra_price Int            @default(0) // contoh: Large +2000
  createdAt   DateTime       @default(now())

  option ProductOption @relation(fields: [option_id], references: [id])
  order_options OrderDetailOption[]
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  order_id       String   @unique @db.ObjectId
  payment_date   DateTime @default(now())
  amount         Int
  status         String   @default("pending") // paid, pending, failed
  payment_method String   // cash, card, e-wallet
  transaction_id String?  // null jika pembayaran offline
  createdAt      DateTime @default(now())

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model Discount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String   @unique
  description  String
  type         String   // percentage, fixed
  value        Int
  min_purchase Int?     // minimum belanja (opsional)
  valid_days   String[] // contoh: ["Saturday", "Sunday"] (opsional)
  time_start   String?  // format "HH:mm", contoh "00:00"
  time_end     String?  // format "HH:mm", contoh "11:00"
  start_date   DateTime
  end_date     DateTime
  is_active    Boolean  @default(true)
  createdAt    DateTime @default(now())

  orders OrderDiscount[]
}


model OrderDiscount {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order_id    String   @db.ObjectId
  discount_id String   @db.ObjectId
  createdAt   DateTime @default(now())

  order    Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  discount Discount @relation(fields: [discount_id], references: [id])
}

model InventoryTransaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  product_id  String   @db.ObjectId
  type        String   // in, out, adjust
  quantity    Int
  reference   String?  // bisa simpan ID order atau keterangan lain
  createdAt   DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id])
}
